		
		    ---	CSharp Statesment  ---

			*** ACTIVACION DEL AJUSTE DE LA LINEA ***


- Ubicar en "Herramientas" las "opciones".
- Ubicar "Editor de texto", "todos los lenguajes".
- Activar la casilla "Word Wrap" u "Ajuste de linea".

CUALQUIER CASO : https://jd-bots.com/2021/07/10/how-to-enable-word-wrap-in-visual-studio/

	Uso del Switch

cautions:

- la expresion constante ha de ser unica.
- solo se puede usar para evaluar: int, char, String (float y double deben de hacerse con if).
- deben de llevar su break de flujo.
- se puede utilizar return y throw.


			*** HERENCIA DE EXCEPCIONES ***

Arbol de Jerarquia de Excepciones: 

1.- Exception (Mayor Jerarquia, contempla indeterminadamente las excepciones)
2.- SystemException
3.- FormatException
4.- OverflowException


			*** CONFLICTO DE EXCEPCIONES ***

En caso de querer abarcar excepciones mas especificas, la jerarquia se debe de aplicar anversamente (la mas especifica a la mas general)

			*** EXCEPCIONES CON FILTRO ***

		--- EN ESTE FILTRO SE PUEDE APLICAR MULTIPLES FILTROS SEGUN LA SINTAXIS ---
 catch (Exception ex) when (ex.GetType() != typeof(FormatException))//MAYOR EXCEPTION, ES RECOMENDABLE SER MAS ESPECIFICO CON LAS EXCEPCIONES PARA CONTEMPLAR LAS REPARACIONES
                {
                    Console.WriteLine(ex.Message);
                    Console.WriteLine("ha habido un error");
                    Console.WriteLine("EL FORMANO DEBE DE SER NECESARIAMENTE UN NUMERO");
                    
                }

			*** EXPRESIONES CHECKED ***

Las expresiones "checked" y "unchecked" solo funcionan para verificar expresiones del tipo "int" o "long"(UNICAMENTE).


			*** THROW EXCEPTIONS ***

Al hacer la llamada a esta excepcion, obligamos a que sea implementado el "try catch" en el llamado al metodo.

			
			*** Finally ***

Con este bloque, aseguramos que el codigo se ejecute siempre, tanto si cae en el bloque "try", o en el bloque "catch".

- normalmente se usa en BBDD o lectura de ficheros.
- se ejecuta, normalmente, para liberar recursos.

Con el "finally" nos aseguramos que la conexion se cierra y ya no se consumen recursos *** IMPORTANTE *** 

			


			*** PROGRAMACION ORIENTADA A OBJETOS ***

				*** ENCAPSULACION ***

 Prohibicion de acceso a datos desde una clase a otras.

Modificadores de Acceso:

- Public :
	
	Accesible desde cualquier parte, mas alla de su "ambito".

- Private:

	Accesible desde la propia clase, solo accesible desde su "ambito" .

- Protected:

	Accesible desde la clase derivada.

- Internal:

	Accesible desde el mismo ensamblado.

- Protected Internal:

	Accesible desde el mismo ensamblado o clase derivada de otro ensamblado.

- Private Protected:

	Accesible desde la misma clase o clase derivada del mismo ensamblado.

- Por defecto: 

	Accesible desde el mismo paquete.


- Clase:

	Modelo donde se redactan las caracteristicas comunes de un grupo de objetos.

- Objetos:

	Ejemplar perteneciente a una clase.

- Tiene Atributos (Propiedades / Caracteristicas).
	
	ejm: color, tama√±o, edad (...).

- Tiene un comportamiento (Metodos / Funciones).
	
	ejm: correr, arrancar, medir (...).


- Las clases han de crearse dentro de las llaves del namespace.


			*** CONVENCIONES EN C#***


- Identificadores "public" deben comenzar con letra mayuscula

	ejm: Notacion "PascalCase", --- public double CalculoArea() {} --- DE ESTA FORMA

- Identificacores no "public" han de iniciar  con letra minuscula.

	ejm: Notacion "camelCase", --- private int longitudRadio() {} --- DE ESTA FORMA

			

			*** CONSTRUCTORES ***


Su finalidad es dar un estado inicial a los objetos (inicializar).



			*** SOBRECARGA DE CONSTRUCTORES ***


Creacion de objetos con diferentes estados iniciales. Se produce cuando la clase tiene mas de 1 constructor, cada constructor debe de recibir diferentes numeros de parametros.



